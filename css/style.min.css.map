{"version":3,"sources":["base/_typography.scss","abstracts/_helpers.scss","abstracts/_iconfonts.scss","style.min.css","base/_reset.scss","abstracts/_mixins.scss","../../node_modules/include-media/dist/_include-media.scss","abstracts/_variables.scss","components/list/_list-social.scss","components/list/_variables.scss","components/list/_list-social-dark.scss","components/navigation/_navigation.scss","components/navigation/_variables.scss","components/navigation/_navigation-toggle.scss","components/navigation/_navigation-list.scss","components/navigation/_navigation-search.scss","components/top-bar/_top-bar.scss","components/top-bar/_variables.scss","components/gallery/_gallery.scss","components/gallery/_variables.scss","components/buttons/_buttons.scss","layout/_common.scss","layout/_header.scss","layout/section/_section.scss","layout/section/_section-background.scss","layout/section/_header.scss","layout/section/_body.scss","layout/section/_text.scss","layout/section/_variables.scss","layout/card/_card.scss","layout/card/_variables.scss","layout/bar/_bar.scss","layout/bar/_variables.scss","layout/item/_item.scss","layout/item/_variables.scss","layout/footer/_footer.scss","layout/footer/_variables.scss"],"names":[],"mappings":"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","file":"style.min.css","sourcesContent":["@import url( 'https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,700,700i&subset=cyrillic-ext');\n\n.h1,\n.h2,\nh1,\nh2 {\n    margin: 0 0 2rem;\n}\n\n.h1,\nh1 {\n    display: inline-block;\n    @include rem-font-size(map-deep-get($base, h1, fontSize));\n    line-height: map-deep-get($base, h1, lineHeight);\n    font-weight: map-deep-get($base, h1, fontWeight);\n    color: map-deep-get($base, h1, color);\n    text-transform: uppercase;\n    font-style: normal;\n\n    @include media ('<tablet') {\n        @include rem-font-size(map-deep-get($base, h1, mobile, fontSize));\n        line-height: map-deep-get($base, h1, mobile, lineHeight);\n    }\n}\n\n.h2,\nh2 {\n    display: inline-block;\n    position: relative;\n    @include rem-font-size(map-deep-get($base, h2, fontSize));\n    line-height: map-deep-get($base, h2, lineHeight);\n    font-weight: map-deep-get($base, h2, fontWeight);\n    color: map-deep-get($base, h2, color);\n    text-transform: uppercase;\n    padding: 0 0 1.2rem;\n\n    &:after {\n        position: absolute;\n        bottom: 0;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 4.5rem;\n        height: 0.2rem;\n        background: map-deep-get($base, h2, borderColor);\n        content: '';\n    }\n}\n\n.h2-inverse {\n    @extend .h2;\n    color: map-deep-get($base, h2Inverse, color);\n    border-color: map-deep-get($base, h2Inverse, borderColor);\n}\n\n.h3,\nh3 {\n    display: inline-block;\n    position: relative;\n    @include rem-font-size(map-deep-get($base, h3, fontSize));\n    line-height: map-deep-get($base, h3, lineHeight);\n    font-weight: map-deep-get($base, h3, fontWeight);\n    color: map-deep-get($base, h3, color);\n    text-transform: uppercase;\n    padding: 0 0.5rem;\n    border-left: 1px dotted map-deep-get($base, h3, borderColor);\n}\n","// This is the most used helpers.\n//\n// You can remove or add your own helpers in this file.\n\n%listreset {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n// clearfix\n\n%clearfix {\n    &:after {\n        content: '';\n        display: block;\n        clear: both;\n    }\n}\n// centering\n\n%center-block {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n.clearfix {\n    @extend %clearfix;\n}\n// Only display content to screen readers\n//\n// See: http://a11yproject.com/posts/how-to-hide-content/\n\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0,0,0,0);\n    border: 0;\n}\n// Use in conjunction with .sr-only to only display content when it's focused.\n// Useful for \"Skip to main content\" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1\n// Credit: HTML5 Boilerplate\n\n.sr-only-focusable {\n    &:active,\n    &:focus {\n        position: static;\n        width: auto;\n        height: auto;\n        margin: 0;\n        overflow: visible;\n        clip: auto;\n    }\n}\n/// * Helper class to truncate and add ellipsis to a string too long for it to fit\n/// * on a single line.\n/// * 1. Prevent content from wrapping, forcing it on a single line.\n/// * 2. Add ellipsis at the end of the line.\n\n.ellipsis {\n    white-space: nowrap; // 1\n    text-overflow: ellipsis; // 2\n    overflow: hidden;\n}\n","@font-face {\n    font-family: 'icomoon';\n    src: url('../fonts/iconmoon/icomoon.eot?ypd7h6');\n    src: url('../fonts/iconmoon/icomoon.eot?ypd7h6#iefix') format('embedded-opentype'), url('../fonts/iconmoon/icomoon.ttf?ypd7h6') format('truetype'), url('../fonts/iconmoon/icomoon.woff?ypd7h6') format('woff'), url('../fonts/iconmoon/icomoon.svg?ypd7h6#icomoon') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n\n[class*=\"icon-\"],\n[class^=\"icon-\"] {\n    /* use !important to prevent issues with browser extensions that change fonts */\n    font-family: 'icomoon' !important;\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    /* Better Font Rendering =========== */\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-youtube:before {\n    content: \"\\e908\";\n}\n\n.icon-twitter:before {\n    content: \"\\e900\";\n}\n\n.icon-facebook:before {\n    content: \"\\e901\";\n}\n\n.icon-edit:before {\n    content: \"\\e90b\";\n}\n\n.icon-message:before {\n    content: \"\\e909\";\n}\n\n.icon-watch:before {\n    content: \"\\e90a\";\n}\n\n.icon-send:before {\n    content: \"\\e902\";\n}\n\n.icon-phone:before {\n    content: \"\\e903\";\n}\n\n.icon-chevron-right:before {\n    content: \"\\e904\";\n}\n\n.icon-chevron-left:before {\n    content: \"\\e905\";\n}\n\n.icon-chevron-down:before {\n    content: \"\\e906\";\n}\n\n.icon-chevron-up:before {\n    content: \"\\e907\";\n}\n\n.icon-google-plus:before {\n    content: \"\\ea8b\";\n}\n","// Note: any .css or .scss files included in the 'styles' directory\n// will be correctly compiled during `gulp` and `gulp production`\n\n//* Vendors *//\n@import './node_modules/include-media/dist/include-media';\n\n\n//* Abstracts modules *//\n@import 'abstracts/main';\n\n//* Base modules *//\n@import 'base/main';\n\n@import 'components/main';\n\n//* Layout modules *//\n@import 'layout/main';\n\n//* Pages modules *//\n@import 'pages/main';\n","// This is base reset for global components.\n//\n// Note: If you use a framework that includes base styling then you need to remove this file.\n\nhtml {\n\twidth: 100%;\n\theight: 100%;\n\tbox-sizing: border-box;\n}\n\n*,\n*:after,\n*:before {\n\tbox-sizing: inherit;\n}\n\nbody {\n\t@include font-smoothing(on);\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: table;\n\ttable-layout: fixed;\n\tmargin: 0 auto;\n\n\t@include media ('<tablet') {\n\t\tpadding-top: 63px;\n\t}\n}\n// adaptive images\n\nimg {\n\tmax-width: 100%;\n\theight: auto;\n}\n// google map fix\n\n.gm-style img {\n\tmax-width: none;\n}\n// hide tel links on desktop\n@media only screen and (min-width: 1025px) {\n\ta[href^=\"skype\"],\n\ta[href^=\"sms\"],\n\ta[href^=\"tel\"] {\n\t\tcursor: default;\n\t\tpointer-events: none;\n\t}\n}\n","// Most used mixins.\n//\n// Note: If you use a framework (bootstrap, zurb etc.) that includes mixins you can import them too or remove this file.\n// vertical align el inside parent with fixed height/min-height\n// usage\n// html - .parent>.child\n// scss - @include v-align;\n//     or @include v-align(250px);\n//     or @include v-align(250px, bottom, before);\n//\n@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {\n    white-space: nowrap;\n    text-align: center;\n\n    &:#{$va-pseudo} {\n        content: '';\n        display: inline-block;\n        vertical-align: $va-direction;\n        width: 0;\n        min-height: $va-height;\n    }\n\n    > * {\n        white-space: normal;\n        display: inline-block;\n        vertical-align: $va-direction;\n        max-width: 99%;\n    }\n}\n// vertical align a pair of child el inside parent\n// usage\n// html - .post>.image+.text\n// scss - @include v-align-pair(image, text);\n//     or @include v-align-pair(image, text, bottom);\n//     or @include v-align-pair(image, text, middle, 200px);\n//\n@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto ) {\n    display: table;\n\n    .#{$child-name1} {\n        display: table-cell;\n        vertical-align: $valign;\n        width: $width1;\n    }\n\n    .#{$child-name2} {\n        display: table-cell;\n        vertical-align: $valign;\n        width: $width2;\n    }\n}\n// vertical align el\n// usage: @include vertical-align-el;\n//\n@mixin vertical-align-el {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n/// Mixin helping defining both `width` and `height` simultaneously.\n///\n/// @author Hugo Giraudel\n///\n/// @access public\n///\n/// @param {Length} $width - Element’s `width`\n/// @param {Length} $height ($width) - Element’s `height`\n///\n/// @example scss - Usage\n///   .foo {\n///     @include size(10em);\n///   }\n///\n///   .bar {\n///     @include size(100%, 10em);\n///   }\n///\n/// @example css - CSS output\n///   .foo {\n///     width: 10em;\n///     height: 10em;\n///   }\n///\n///   .bar {\n///     width: 100%;\n///     height: 10em;\n///   }\n///\n@mixin size($width, $height: $width) {\n    width: $width;\n    height: $height;\n}\n/// font-smothing\n/// @include font-smoothing(on);\n/// @include font-smoothing(off);\n@mixin font-smoothing($value: on) {\n     @if $value == on{\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    @else {\n        -webkit-font-smoothing: subpixel-antialiased;\n        -moz-osx-font-smoothing: auto;\n    }\n}\n/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.\n///\n/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement\n///\n/// @example scss - Usage\n///   .element {\n///     @include hide-text;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     overflow: hidden;\n///     text-indent: 101%;\n///     white-space: nowrap;\n///   }\n///\n@mixin hide-text {\n    overflow: hidden;\n    text-indent: 101%;\n    white-space: nowrap;\n}\n/// Creates a visual triangle.\n/// Mixin takes ($size, $color, $direction)\n/// The $size argument can take one or two values—width height.\n/// The $color argument can take one or two\n/// values—foreground-color background-color.\n///\n/// @author http://bourbon.io/docs/#triangle\n///\n/// $direction:\n/// up, down, left, right, up-right, up-left, down-right, down-left\n/// @example scss - Usage\n///   @include triangle(12px, gray, down);\n///   @include triangle(12px 6px, gray blue, up-left);\n///\n@mixin triangle($size, $color, $direction) {\n    $width: nth($size, 1);\n    $height: nth($size, length($size));\n    $foreground-color: nth($color, 1);\n    $background-color: if(length($color) == 2, nth($color, 2), transparent);\n    height: 0;\n    width: 0;\n    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {\n        $width: $width / 2;\n        $height: if(length($size) > 1, $height, $height/2);\n        @if $direction == up {\n            border-bottom: $height solid $foreground-color;\n            border-left: $width solid $background-color;\n            border-right: $width solid $background-color;\n        }\n        @else if $direction == right {\n            border-bottom: $width solid $background-color;\n            border-left: $height solid $foreground-color;\n            border-top: $width solid $background-color;\n        }\n        @else if $direction == down {\n            border-left: $width solid $background-color;\n            border-right: $width solid $background-color;\n            border-top: $height solid $foreground-color;\n        }\n        @else if $direction == left {\n            border-bottom: $width solid $background-color;\n            border-right: $height solid $foreground-color;\n            border-top: $width solid $background-color;\n        }\n    }\n    @else if ($direction == up-right) or ($direction == up-left) {\n        border-top: $height solid $foreground-color;\n        @if $direction == up-right {\n            border-left: $width solid $background-color;\n        }\n        @else if $direction == up-left {\n            border-right: $width solid $background-color;\n        }\n    }\n    @else if ($direction == down-right) or ($direction == down-left) {\n        border-bottom: $height solid $foreground-color;\n        @if $direction == down-right {\n            border-left: $width solid $background-color;\n        }\n        @else if $direction == down-left {\n            border-right: $width solid $background-color;\n        }\n    }\n    @else if ($direction == inset-up) {\n        border-color: $background-color $background-color $foreground-color;\n        border-style: solid;\n        border-width: $height $width;\n    }\n    @else if ($direction == inset-down) {\n        border-color: $foreground-color $background-color $background-color;\n        border-style: solid;\n        border-width: $height $width;\n    }\n    @else if ($direction == inset-right) {\n        border-color: $background-color $background-color $background-color $foreground-color;\n        border-style: solid;\n        border-width: $width $height;\n    }\n    @else if ($direction == inset-left) {\n        border-color: $background-color $foreground-color $background-color $background-color;\n        border-style: solid;\n        border-width: $width $height;\n    }\n}\n/// Animate css properties\n// usage\n// scss - @include animate(color);\n//     or @include animate(color width);\n//     or @include animate(color width, 1s, linear);\n//\n$animation-speed: 0.3s !default;\n@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {\n    $list: ();\n    @each $prop in $properties {\n        $str: #{$prop} #{$duration} #{$easing};\n        $list: append($list, $str, comma);\n    }\n    transition: $list;\n}\n/// Mixin for styling form-placeholders\n/// @example scss - Usage\n///   @include placeholder {\n///    color: #333;\n///   }\n///\n///   input[type='text'],\n///   input[type='tel'],\n///   input[type='email'] {\n///     @include placeholder {\n///      color: red;\n///     }\n///   }\n@mixin placeholder {\n    &::-webkit-input-placeholder {\n        @content;\n    }\n\n    &::-moz-placeholder {\n        opacity: 1;\n        @content;\n    }\n\n    &:-moz-placeholder {\n        @content;\n    }\n\n    &:-ms-input-placeholder {\n        @content;\n    }\n\n    &.placeholder {\n        @content;\n    }\n}\n/// Font-size px to rem calc\n/// @example scss - Usage\n/// selector {\n///    @include rem-font-size(16px);\n/// }\n@mixin rem-font-size($pxSize) {\n    font-size: $pxSize;\n    font-size: ($pxSize / 10px) + rem;\n}\n@mixin vertical-align-flex {\n    display: flex;\n    align-items: center;\n}\n@mixin fullContain($position) {\n    position: $position;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\n\n@mixin inheritTypography{\n  font-size: inherit;\n  line-height: inherit;\n  font-weight: inherit;\n  color: inherit;\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","$fonts: (\n    sansSerif: unquote(' \\'Roboto\\', sans-serif')\n);\n\n$colors: (\n    white: #fff,\n    black: #000,\n\n    gray: #999,\n    gray10: #eaeced,\n    gray20: #666,\n    gray30: #5f5f61,\n\n    brown: #222,\n    brown100: #1e1e1e,\n    brown200: #282828,\n    brown300: #2f2f2f,\n\n\n    //salad\n    salad100: #42c9cf,\n    salad200: #37bec4,\n    salad300: #2eb5bb,\n    salad400: #34abb1\n);\n\n$base: (\n    h1: (\n        fontSize: 27px,\n        lineHeight: 3rem,\n        fontWeight: 700,\n        color: map-get($colors, white),\n        mobile: (\n          fontSize: 16px,\n          lineHeight: 2rem,\n        )\n    ),\n    h2: (\n        fontSize: 18px,\n        lineHeight: 2rem,\n        fontWeight: 600,\n        color: map-get($colors, black),\n        borderColor: map-get($colors, salad400)\n    ),\n    h2Inverse: (\n        color: map-get($colors, white),\n        borderColor: map-get($colors, white)\n    ),\n    h3: (\n        fontSize: 16px,\n        lineHeight: 1.8rem,\n        fontWeight: 600,\n        color: map-get($colors, white),\n        borderColor: map-get($colors, salad400)\n    ),\n);\n\n// Breakpoints for include media mixin\n$breakpoints: (\n  'phone': 480px,\n  'tablet': 640px,\n  'desktop': 1024px,\n  'widescreen': 1200px\n);\n\n// Keywords for include media mixin\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 2.5), (min-resolution: 240dpi)'\n);\n\n$baseColors: (\n    bodyBg: map-get($colors, white)\n);\n",".list-social {\n    @extend %listreset;\n    @include v-align;\n    display: inline-block;\n    font-size: 0;\n\n    li {\n        @include animate (color);\n        display: inline-block;\n        font-size: map-deep-get($list, social, fontSize);\n        color: map-deep-get($list, social, color);\n        margin: 0 0.3rem;\n        border-radius: 0.3rem;\n        overflow: hidden;\n\n        &.active,\n        &:hover {\n            color: map-deep-get($list, social, activeColor);\n\n            a {\n                background: map-deep-get($list, social, activeBackground);\n            }\n        }\n    }\n\n    a {\n        @include inheritTypography;\n        @include animate (background);\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        background: map-deep-get($list, social, background);\n        padding: 0.5rem;\n\n        &:hover {\n            text-decoration: none;\n        }\n    }\n    @import 'list-social-dark';\n}\n","$list: (\n    number: (\n        fontSize: 18px,\n        color: map-get($colors, blue)\n    ),\n    navigation: (\n        fontSize: 20px,\n        fontWeight: 600,\n        color: map-get($colors, white)\n    ),\n    social: (\n        fontSize: 2rem,\n        background: map-get($colors, salad200),\n        activeBackground: map-get($colors, white),\n        color: map-get($colors, white),\n        activeColor: map-get($colors, salad200),\n        darkBackground: map-get($colors, brown200),\n        darkActiveBackground: map-get($colors, gray30),\n        darkColor: map-get($colors, gray30),\n        darkActiveColor: map-get($colors, brown200)\n    )\n);\n","&--dark {\n    li {\n        color: map-deep-get($list, social, darkColor);\n\n        &.active,\n        &:hover {\n            color: map-deep-get($list, social, darkActiveColor);\n\n            a {\n                background: map-deep-get($list, social, darkActiveBackground);\n            }\n        }\n    }\n\n    a {\n        background: map-deep-get($list, social, darkBackground);\n    }\n}\n",".js {\n    .nav {\n        &-collapse {\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n            flex: 1;\n            padding: 0 2rem;\n            background: map-get($navigation, background);\n            text-align: center;\n            border-radius: map-get($navigation, borderRadius);\n\n            @include media ('<desktop') {\n                padding: 0 1rem;\n            }\n\n            @include media ('<tablet') {\n                flex-flow: row wrap;\n                flex: 0 0 100%;\n                background: none;\n            }\n        }\n        @import 'navigation-toggle';\n        @import 'navigation-list';\n        @import 'navigation-search';\n    }\n}\n","$navigation : (\n  fontSize: 1.4rem,\n  lineHeight: 1.6rem,\n  color: map-get($colors, white),\n  activeColor: map-get($colors, salad400),\n  colorMobile: map-get($colors, salad400),\n  background: map-get($colors, salad400),\n  activeBackground: map-get($colors, white),\n  burgerColor: map-get($colors, black),\n  borderRadius: 0.5rem,\n\n  item: (\n    borderColor: map-get($colors, white)\n  ),\n\n  search: (\n      background: transparent,\n      borderColor: map-get($colors, white),\n      borderRadius: 0,\n      color: map-get($colors, white)\n  )\n);\n","&-toggle {\n    position: relative;\n    background: none;\n    border: none;\n    outline: none;\n    height: 30px;\n    width: 50px;\n\n    &-holder {\n        position: fixed;\n        top: 1.7rem;\n        right: 1.5rem;\n    }\n\n    &.active {\n        &:before {\n            box-shadow: transparent 0 0 0 0;\n            top: 50%;\n            transform: rotate(225deg);\n        }\n\n        &:after {\n            top: 50%;\n            transform: rotate(315deg);\n        }\n    }\n\n    &:after,\n    &:before {\n        background: map-deep-get($navigation, burgerColor);\n        backface-visibility: hidden;\n        content: \"\";\n        height: 2px;\n        left: 0;\n        transition: 0.75s;\n        width: 50px;\n    }\n\n    &:before {\n        box-shadow: map-deep-get($navigation, burgerColor) 0 14px 0 0;\n        position: absolute;\n        top: 0;\n    }\n\n    &:after {\n        position: absolute;\n        top: calc(100% - 2px);\n    }\n\n    .text-hidden {\n        width: 0;\n        overflow: hidden;\n        display: block;\n    }\n}\n","&-list {\n    display: inline-block;\n    font-size: 0;\n\n    &.visible-mobile {\n        display: none;\n\n        @include media ('<640px') {\n            display: block;\n        }\n    }\n\n    @include media ('<tablet') {\n        width: 100%;\n        text-align: center;\n    }\n\n    li {\n        @include animate (background color);\n        font-size: map-deep-get($navigation, fontSize);\n        line-height: map-deep-get($navigation, lineHeight);\n        position: relative;\n        display: inline-block;\n        min-width: 10rem;\n        width: auto;\n        color: map-get($navigation, color);\n        text-transform: uppercase;\n        border-left: 0.1rem solid map-deep-get($navigation, item, borderColor);\n\n        &:last-child {\n            border-right: 0.1rem solid map-deep-get($navigation, item, borderColor);\n        }\n\n        &.active,\n        &:hover {\n            color: map-get($navigation, activeColor);\n            background: map-get($navigation, activeBackground);\n        }\n\n        @include media ('<desktop') {\n            margin: 0 1rem;\n        }\n\n        @include media ('<tablet') {\n            width: 100%;\n            margin: 0;\n            padding: 1rem 0;\n            color: map-get($navigation, colorMobile);\n        }\n    }\n\n    a {\n        @include inheritTypography;\n        display: block;\n        padding: 2rem 1.5rem;\n\n        &:hover {\n            text-decoration: none;\n        }\n\n        @include media ('<tablet') {\n            padding: 1rem 0;\n        }\n    }\n}\n","&-search {\n    position: relative;\n    margin-left: 2.5rem;\n\n    @include media ('<desktop') {\n        display: none;\n    }\n\n    @include media ('<tablet') {\n        display: block;\n        margin: 0;\n        width: 100%;\n    }\n\n    .btn-search,\n    .form-control {\n        background: map-deep-get($navigation, search, background);\n        border-color: map-deep-get($navigation, search, borderColor);\n        border-radius: map-deep-get($navigation, search, borderRadius);\n        color: map-deep-get($navigation, search, color);\n    }\n\n    .form-control {\n        padding-right: 4rem;\n        @include placeholder {\n            color: map-deep-get($navigation, search, color);\n        };\n    }\n\n    .btn-search {\n        @include fullContain(absolute);\n        left: auto;\n        width: 4rem;\n        padding: 0;\n    }\n}\n",".top-bar {\n    font-size: map-get($topBar, fontSize);\n    line-height: map-get($topBar, lineHeight);\n    background: map-get($topBar, background);\n    padding: 1rem 0;\n\n    @include media ('<tablet') {\n        display: none;\n    }\n\n    &__flex {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n\n    &__list {\n        @extend %listreset;\n        display: inline-block;\n\n        &--right {\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n\n            .top-bar__list {\n                margin-left: 1rem;\n\n                li {\n                    &.active,\n                    &:hover {\n                        a {\n                            text-decoration: underline;\n                        }\n                    }\n                }\n            }\n        }\n\n        li {\n            @include animate (color);\n            display: inline-block;\n            color: map-get($topBar, color);\n\n            &.active,\n            &:hover {\n                color: map-get($topBar, activeColor);\n            }\n        }\n\n        a {\n            @include inheritTypography;\n            padding: 0.3rem;\n\n            &:hover {\n                text-decoration: none;\n            }\n        }\n    }\n}\n","$topBar: (\n    fontSize: 1.4rem,\n    lineHeight: 1.6rem,\n    background: map-get($colors, brown),\n    color: map-get($colors, white),\n    activeColor: map-get($colors, salad200)\n);\n",".gallery {\n    &:not(.gallery--outline) {\n        .swiper-slide {\n            max-width: 50rem;\n        }\n    }\n\n    &--outline {\n        position: relative;\n        border: 0.2rem dashed map-deep-get($gallery, outline, borderColor);\n        color: map-deep-get($gallery, outline, color);\n    }\n\n    .item {\n        max-width: 100%;\n        flex-flow: row nowrap;\n\n        @include media ('<desktop') {\n            flex-flow: column nowrap;\n            align-items: center;\n            text-align: center;\n        }\n\n        &-content {\n            @include media ('<desktop') {\n                max-width: 30rem;\n            }\n        }\n    }\n\n    &-navigation {\n        text-align: center;\n        font-size: 0;\n    }\n\n    &-pagination {\n        bottom: 2rem;\n        left: 50%;\n        transform: translateX(-50%);\n\n        .swiper-pagination-bullet {\n            width: 1rem;\n            height: 1rem;\n            margin: 0 0.5rem;\n            background: map-deep-get($gallery, pagination, background);\n        }\n    }\n\n    &-btn {\n        @include v-align;\n        cursor: pointer;\n        display: inline-block;\n        margin: 1rem 0.3rem;\n        width: 3.6rem;\n        height: 3.6rem;\n        border-radius: 0.3rem;\n        background: map-deep-get($gallery, btn, background);\n        color: map-deep-get($gallery, btn, color);\n\n        .gallery--outline & {\n            outline: 0 0.3rem;\n            background: none;\n            border: 0.2rem dashed map-deep-get($gallery, outline, borderColor);\n        }\n\n        [class^=\"icon-\"] {\n            font-size: map-deep-get($gallery, btn, fontSize);\n        }\n    }\n}\n","$gallery: (\n  outline: (\n    borderColor: map-get($colors, white),\n    color: map-get($colors, white)\n  ),\n  pagination: (\n    background: map-get($colors, white)\n  ),\n  btn: (\n    background: map-get($colors, salad400),\n    color: map-get($colors, white),\n    fontSize: 2rem\n  )\n)\n",".btn-lg {\n    @include media ('<tablet') {\n        padding: 1rem 4rem;\n    }\n}\n",".container {\n    @include media ('<desktop') {\n        padding-right: 3rem;\n        padding-left: 3rem;\n    }\n}\n\n#map {\n    width: 100%;\n    height: 40vh;\n}\n","$headerMobileBg: map-get($colors, white);\n$headerMobileShadow: map-get($colors, black);\n$headerDark: rgba(map-get($colors, black), 0.8);\n\n#header {\n    position: relative;\n    z-index: 1;\n\n    @include media ('<tablet') {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        z-index: 2;\n        background: $headerMobileBg;\n        box-shadow: 0 0 1rem $headerMobileShadow;\n    }\n}\n\n.header {\n    &-logo {\n        @extend %center-block;\n        display: block;\n        max-width: 100px;\n        padding: 2rem 0;\n\n        @include media ('<tablet') {\n            max-width: 4rem;\n            padding: 1rem 0;\n            margin: 0;\n        }\n    }\n}\n",".section {\n    @extend %clearfix;\n    position: relative;\n    display: flex;\n    flex-flow: row wrap;\n    align-items: center;\n    justify-content: center;\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    overflow: hidden;\n\n    &--small {\n        min-height: 40rem;\n    }\n\n    &--medium {\n        min-height: 60rem;\n\n        @include media ('<tablet') {\n            min-height: 51rem;\n        }\n    }\n\n    &--overlay {\n        &:after {\n            @include fullContain(absolute);\n            content: '';\n            background: map-deep-get($section, overlayBg);\n        }\n\n        &-green {\n            &:after {\n                background: map-deep-get($section, greenOverlayBg);\n            }\n        }\n    }\n\n    &--inverse-offset {\n        margin-top: -2.8rem;\n\n        @include media ('<tablet') {\n            margin-top: 0;\n        }\n    }\n\n    &--padded {\n        padding: 0;\n    }\n    @import 'section-background';\n    @import 'header';\n    @import 'body';\n    @import 'text';\n\n    &-icon {\n        margin: 0 0 2rem;\n\n        img {\n            max-height: 10rem;\n        }\n    }\n\n    &-title {\n        margin: 0;\n    }\n\n    .embed-responsive {\n        margin-bottom: 3rem;\n    }\n\n    .img-responsive {\n        width: 100%;\n        margin-bottom: 3rem;\n    }\n}\n","&--background {\n    background: linear-gradient(to right, map-get($colors, salad400) 0%,map-get($colors, salad400) 50%,map-get($colors, salad100) 51%,map-get($colors, salad100) 100%);\n}\n","&-heading {\n    @extend %clearfix;\n    width: 100%;\n    padding: 5rem 0;\n    text-align: center;\n}\n","&-body {\n    padding: 0 0 5rem;\n}\n","&-text {\n    @extend %center-block;\n    @include rem-font-size(map-deep-get($section, text, fontSize));\n    z-index: 1;\n    position: relative;\n    max-width: 50vw;\n    padding: 2rem;\n    color: map-deep-get($section, text, color);\n    text-align: center;\n    font-weight: map-deep-get($section, text, fontWeight);\n    line-height: map-deep-get($section, text, lineHeight);\n    letter-spacing: map-deep-get($section, text, letterSpacing);\n\n    @include media ('<desktop') {\n        max-width: 100%;\n    }\n\n    @include media ('<tablet') {\n        @include rem-font-size(map-deep-get($section, text, mobile, fontSize));\n        line-height: map-deep-get($section, text, mobile, lineHeight);\n    }\n\n    .h1 {\n        display: block;\n    }\n\n    p {\n        margin: 0 0 2rem;\n    }\n}\n","$section: (\n    overlayBg: rgba(map-get($colors, black), 0.5),\n    greenOverlayBg: rgba(map-get($colors, salad400), 0.8),\n    text: (\n      fontSize: 18px,\n      lineHeight: 3rem,\n      letterSpacing: 0.05rem,\n      fontWeight: 300,\n      color: map-get($colors, white),\n\n      mobile: (\n        fontSize: 14px,\n        lineHeight: 1.6rem\n      )\n    )\n);\n",".card {\n    @each $key, $value in $cardColors {\n        &-#{$key} {\n            background: $value;\n        }\n    }\n    font-size: map-get($card, fontSize);\n    line-height: map-get($card, lineHeight);\n    color: map-get($card, color);\n    padding: 2.5rem 2rem;\n\n    @include media ('<desktop') {\n        margin: 0 0 2rem;\n        text-align: center;\n    }\n\n    &--color-inverted {\n        color: map-get($card, colorInverted);\n    }\n\n    &--padded {\n        padding: 0;\n    }\n\n    &--padded-sm {\n        @include media ('<desktop') {\n            margin: 0;\n        }\n    }\n\n    &-header {\n        font-size: map-get($card, titleFontSize);\n        line-height: map-get($card, titleLineHeight);\n        text-transform: uppercase;\n        margin: 0 0 2rem;\n    }\n\n    &-image {\n        margin: 0 0 2rem;\n    }\n\n    &-image--icon {\n        max-height: 6rem;\n    }\n\n    &-description {\n        padding: 0 0 2rem;\n\n        .card--color-inverted & {\n            color: map-get($card, descriptionColor);\n        }\n    }\n\n    &-meta {\n        @include v-align;\n        text-align: left;\n        padding: 0.5rem 0;\n        margin: 0 0 2rem;\n        color: map-get($card, metaColor);\n        border-top: 0.1rem solid map-get($card, metaBorderColor);\n        border-bottom: 0.1rem solid map-get($card, metaBorderColor);\n\n        &__item {\n            @include v-align;\n            @include inheritTypography;\n\n            &:hover {\n                text-decoration: none;\n            }\n        }\n\n        [class^=\"icon-\"] {\n            color: map-get($card, metaIconColor);\n        }\n    }\n}\n","$cardColors: (\n  background-1: map-get($colors, salad100),\n  background-2: map-get($colors, salad200),\n  background-3: map-get($colors, salad300),\n  background-4: map-get($colors, salad400),\n);\n\n$card: (\n  color: map-get($colors, white),\n  colorInverted: map-get($colors, black),\n  fontSize: 1.4rem,\n  lineHeight: 1.6rem,\n  titleFontSize: 1.6rem,\n  titleLineHeight: 1.8rem,\n  descriptionColor: map-get($colors, gray),\n  metaBorderColor: map-get($colors, gray),\n  metaColor: map-get($colors, gray),\n  metaIconColor: map-get($colors, salad400)\n)\n",".bar {\n    font-size: map-get($bar, fontSize);\n    line-height: map-get($bar, lineHeight);\n    font-weight: map-get($bar, fontWeight);\n    padding: 3rem 0;\n\n    &,\n    .text-right {\n        @include media ('<desktop') {\n            text-align: center;\n        }\n    }\n\n    .text-right {\n        @include media ('<desktop') {\n            padding-top: 2rem;\n        }\n    }\n\n    &--green {\n        background: map-deep-get($bar, green, background);\n        color: map-deep-get($bar, green, color);\n\n        a {\n            @include inheritTypography;\n            text-decoration: underline;\n        }\n    }\n}\n","$bar: (\n  fontSize: 1.8rem,\n  lineHeight: 2rem,\n  fontWeight: 500,\n  green: (\n    background: map-get($colors, salad400),\n    color: map-get($colors, white)\n  )\n)\n",".item {\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    padding: 1.5rem;\n\n    .items & {\n        flex: auto;\n        border-right: 0.1rem dashed map-get($item, borderColor);\n\n        @include media ('<desktop') {\n            border: none;\n            border-bottom: 0.1rem dashed map-get($item, borderColor);\n        }\n    }\n\n    .gallery--outline & {\n        padding: 5rem;\n    }\n\n    &-image {\n        width: 10rem;\n        padding: 0 1.5rem;\n\n        @include media ('<tablet') {\n            margin-bottom: 2rem;\n        }\n\n        &--large {\n            width: 30rem;\n        }\n\n        img {\n            @include media ('<desktop') {\n                max-height: 6rem;\n            }\n        }\n    }\n\n    &-header {\n        display: block;\n        font-size: map-deep-get($item, header, fontSize);\n        line-height: map-deep-get($item, header, lineHeight);\n        font-weight: map-deep-get($item, header, fontWeight);\n        color: map-deep-get($item, header, color);\n        margin: 0 0 0.5rem;\n        text-transform: uppercase;\n    }\n\n    &-description {\n        color: map-deep-get($item, description, color);\n\n        .gallery--outline & {\n            color: inherit;\n        }\n    }\n}\n\n.items {\n    .row {\n        display: flex;\n        border-bottom: 0.1rem dashed map-get($item, borderColor);\n\n        @include media ('<desktop') {\n            flex-flow: column wrap;\n            align-items: center;\n            border-bottom: none;\n        }\n\n        &:last-child {\n            border-bottom: none;\n        }\n\n        [class^=\"col-\"] {\n            display: flex;\n            flex-flow: column wrap;\n            padding: 0;\n\n            &:last-child {\n                .item {\n                    border-right: none;\n                }\n            }\n        }\n    }\n}\n","$item: (\n  borderColor: map-get($colors, gray),\n  header: (\n    fontSize: 1.6rem,\n    lineHeight: 2rem,\n    fontWeight: 700,\n    color: map-get($colors, black)\n  ),\n  description: (\n    color: map-get($colors, gray)\n  )\n)\n","#footer {\n    .h3 {\n        margin: 0 0 2rem;\n    }\n\n    p {\n        margin: 0 0 2rem;\n    }\n\n    .bottom-offset--small {\n        margin: 0 0 2rem;\n    }\n}\n\n.footer {\n    &__top {\n        color: map-get($footer, topColor);\n        background: map-get($footer, topBg);\n        padding: 6rem 0 4rem;\n    }\n\n    &__bottom {\n        background: map-get($footer, bottomBg);\n        color: map-get($footer, bottomColor);\n        padding: 3rem 0;\n    }\n\n    &__copy {\n        margin: 0 0 2rem;\n    }\n\n    &__navigation-list {\n        @extend %listreset;\n        width: 100%;\n        font-size: 0;\n        text-align: center;\n        margin: 0 0 2rem;\n\n        li {\n            display: inline-block;\n            font-size: map-get($footer, listFontSize);\n            line-height: map-get($footer, listLineHeight);\n            margin: 0 0.5rem;\n        }\n\n        a {\n            @include inheritTypography;\n        }\n    }\n}\n","$footer: (\n  topBg: map-get($colors, brown),\n  topColor: map-get($colors, gray30),\n  bottomBg: map-get($colors, brown100),\n  bottomColor: map-get($colors, gray30),\n  listFontSize: 1.2rem,\n  lineLineHeight: 1.4rem\n);\n"]}